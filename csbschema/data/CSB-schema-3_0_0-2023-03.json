{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://raw.githubusercontent.com/CCOMJHC/csbschema/main/csbschema/data/CSB-schema-3_0_0-2023-03.json",
  "title": "Schema for Crowdsourced Bathymetry data and metadata, version 3.0.0",
  "type": "object",
  "required": [
    "type",
    "crs",
    "properties",
    "features"
  ],
  "properties": {
    "type": {
      "type": "string",
      "enum": [
        "FeatureCollection"
      ]
    },
    "crs": {
      "type": "object",
      "required": [
        "horizontal",
        "vertical"
      ],
      "properties": {
        "horizontal": {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "EPSG"
              ]
            },
            "value": { "$ref": "#/definitions/EPSG_Number" }
          }
        },
        "vertical": {
          "type": "string",
          "enum": [
            "Transducer"
          ]
        }
      }
    },
    "properties": { "$ref": "#/definitions/B12_Metadata" },
    "lineage" : { "$ref": "#/definitions/Processing"},
    "features": {
      "type": "array",
      "items": { "$ref": "#/definitions/GeoJSONFeature" }
    }
  },
  "definitions": {
    "CRS_Name" : {
      "type": "string",
      "description": "CRS name as an EPSG string.",
      "pattern": "^EPSG:(3276[0-7]$|327[0-5]\\d$|32[0-6]\\d\\d$|3[0-1]\\d\\d\\d$|[1-2][0-9]{4}$|102[4-9]|10[3-9][0-9]$|1[1-9][0-9][0-9]$|[2-9][0-9][0-9][0-9]$)"
    },
    "EPSG_Number": {
      "type": "integer",
      "minimum": 1024,
      "maximum": 32767
    },
    "RFC3339_time": {
      "type": "string",
      "description": "RFC3339 UTC time stamp (note: version 3.0.0 allows timezone naive timestamps).",
      "pattern": "^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)([.][0-9]+)?[Zz]?$"
    },
    "B12_Metadata": {
      "type": "object",
      "required": [
        "providerContactPoint",
        "convention",
        "dataLicense",
        "platform"
      ],
      "properties": {
        "providerContactPoint": { "$ref": "#/definitions/ProviderContactPoint" },
        "convention": { "$ref": "#/definitions/Convention" },
        "dataLicense": { "$ref": "#/definitions/DataLicense" },
        "platform": { "$ref": "#/definitions/Platform" },
        "algorithms": { "$ref": "#/definitions/Algorithms" }
      }
    },
    "ProviderContactPoint": {
      "type": "object",
      "required":[
        "orgName",
        "email",
        "logger",
        "loggerVersion"
      ],
      "properties": {
        "orgName": {
          "type": "string",
          "description": "The Trusted Node’s name, in free-text format."
        },
        "email": {
          "type": "string",
          "pattern": "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}$",
          "description": "A free-text field for the Trusted Node’s email address, so that data users can contact the Trusted Node with questions about the data."
        },
        "logger": {
          "type": "string",
          "description": "The software program or hardware logger used to log the data."
        },
        "loggerVersion": {
          "type": "string",
          "description": "The software or hardware logger version."
        }
      }
    },
    "Convention": {
      "type": "string",
      "enum": [
        "GeoJSON CSB 3.0"
      ],
      "description": "This field describes the format and version for the data and metadata, such as GeoJSON, CSV, or XYZT. Reference the version of the CSB data convention (e.g., CSB 2.0, CSB 3.0) where possible."
    },
    "DataLicense": {
      "type": "string",
      "description": "The license under which the Trusted Node is\n providing CSB data to the IHO DCDB.\n"
    },
    "UniqueVesselID": {
      "type": "string",
      "pattern": "^([0-9a-zA-Z]{2,}(-[0-9a-zA-Z]{2,})+)$",
      "description": "Generated by the Trusted Node, this number identifies the Trusted Node and uniquely identifies the contributing vessel. The characters preceding the hyphen (-) identify the Trusted Node, followed by a hyphen (-), and then the vessel’s unique identifier. The UUID assigned by the Trusted Node is consistent for each contributing vessel, throughout the life of service of the vessel. However, if the vessel chooses to remain anonymous to data users, the Trusted Node does not need to publish the vessel name in association with the UUID."
    },
    "Platform": {
      "type": "object",
      "required": [
        "uniqueID",
        "correctors"
      ],
      "properties": {
        "uniqueID": { "$ref": "#/definitions/UniqueVesselID" },
        "correctors": { "$ref": "#/definitions/Correctors" },
        "type": {
          "type": "string",
          "description": "The type of vessel collecting the data, such as a cargo ship, fishing vessel, private vessel,\nresearch vessel, etc."
        },
        "name": {
          "type": "string",
          "description": "The name of the vessel, in open string format."
        },
        "length": {
          "type": "integer",
          "description": "The length overall (LOA) of the vessel, expressed as a positive value, in metres, to the nearest metre.",
          "minimum": 1
        },
        "IDType": {
          "type": "string",
          "description": "ID numbers used to uniquely identify vessels. Currently, only two types are available: Maritime Mobile Service Identity (MMSI) or International Maritime Organization (IMO) number. The MMSI number is used to uniquely identify a vessel through services such as AIS. The IMO number is linked to a vessel for its lifetime, regardless of change in flag or ownership. Contributors may select only one ID Type.",
          "enum": [
            "MMSI",
            "IMO"
          ]
        },
        "IDNumber": {
          "type": "integer",
          "description": "The value for the ID Type. MMSI numbers are often nine digits, while IMO numbers are the letters “IMO,” followed by a seven-digit number.",
          "oneOf": [
            { "$ref": "#/definitions/IDNumber_MMSI" },
            { "$ref": "#/definitions/IDNumber_IMO"}
          ]
        },
        "sensors": {
          "type": "array",
          "description": "Composite element containing all information about a given sensor in use on the collection platform. Minimum specification of fields as shown; some sensors may have additional fields (e.g., frequency for an echo sounder). Position is given from the PRP (Position Reference Point) in metres. The offsets are positive NED (North (Bow), East (Starboard), Down)",
          "minItems": 1,
          "items": {
            "oneOf": [
              { "$ref": "#/definitions/SensorDescriptionSounder" },
              { "$ref": "#/definitions/SensorDescriptionIMU" },
              { "$ref": "#/definitions/SensorDescriptionGNSS" }
            ]
          }
        }
      }
    },
    "Correctors": {
      "type": "object",
      "required": [
        "positionReferencePoint"
      ],
      "properties": {
        "positionReferencePoint": {
          "type": "string",
          "enum": [
            "GNSS"
          ]
        },
        "soundSpeedDocumented": {
          "type": "boolean",
          "description": "Some systems may have the ability to provide sound speed data and correct the sounding. If details regarding such corrections are known (“True”), it is strongly recommended that the ‘Sound Speed Correction’ field in Table 4 be populated. If “False”, no information about how sound speed was applied has been recorded."
        },
        "positionOffsetsDocumented": {
          "type": "boolean",
          "description": "Describes whether the final vessel position (longitude and latitude) has been corrected for the lateral and longitudinal offsets between the GNSS receiver and the transducer (“True”), or if they were not (“False”). If “True”, the position element of the sensor description field in Table 3 should be populated."
        },
        "dataProcessed": {
          "type": "boolean",
          "description": "Raw data, without tidal corrections or additional processing, are preferable as a contribution to the IHO DCDB. This field allows the data contributor to state whether the data has been processed or corrected (‘True’) or not (‘False’). If ‘True’, it is strongly recommended that detailed information be captured in optional metadata fields as outlined in section 3.3.4. If ‘False’, information in section 3.3.4 is not needed."
        },
        "motionOffsetsApplied": {
          "type": "boolean",
          "description": "Describes whether vessel motion has been corrected for."
        },
        "draftApplied": {
          "type": "boolean",
          "description": "Describes whether vessel draft has been corrected for."
        }
      }
    },
    "IDNumber_MMSI": {
      "type": "integer",
      "minimum": 100000000,
      "maximum": 999999999
    },
    "IDNumber_IMO": {
      "type": "integer",
      "minimum": 1000000,
      "maximum": 9999999
    },
    "SensorDescriptionSounder": {
      "type": "object",
      "required": [
        "type",
        "make",
        "model",
        "position"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Sounder"
          ]
        },
        "make": { "$ref": "#/definitions/SensorMake" },
        "model": { "$ref": "#/definitions/SensorModel" },
        "position": { "$ref": "#/definitions/SensorPosition" },
        "draft": {
          "type": "number",
          "description": "Draft of vessel"
        },
        "frequency": {
          "type": "number",
          "description": "Frequency of echo sounder"
        },
        "transducer": {
          "type": "string",
          "description": "Transducer used with echo sounder"
        }
      }
    },
    "SensorDescriptionIMU": {
      "type": "object",
      "required": [
        "type",
        "make",
        "model",
        "position"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "MotionSensor"
          ]
        },
        "make": { "$ref": "#/definitions/SensorMake" },
        "model": { "$ref": "#/definitions/SensorModel" },
        "position": { "$ref": "#/definitions/SensorPosition" }
      }
    },
    "SensorDescriptionGNSS": {
      "type": "object",
      "required": [
        "type",
        "make",
        "model"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "GNSS"
          ]
        },
        "make": { "$ref": "#/definitions/SensorMake" },
        "model": { "$ref": "#/definitions/SensorModel" },
        "position": { "$ref": "#/definitions/SensorPosition" }
      }
    },
    "SensorMake": {
      "type": "string",
      "description": "Sensor manufacturer"
    },
    "SensorModel": {
      "type": "string",
      "description": "Sensor model"
    },
    "SensorPosition": {
      "type": "array",
      "description": "Position is given from the PRP (Position Reference Point) in metres. The offsets are positive NED (North (Bow), East (Starboard), Down)",
      "minItems": 3,
      "maxItems": 3,
      "items": {
        "type": "number"
      }
    },
    "Algorithms": {
      "type": "array",
      "description": "Array of algorithms applied to the data.",
      "minItems": 1,
      "items": {
        "type": "object",
        "required": [
          "name",
          "Params"
        ]
      }
    },
    "Processing": {
      "type": "array",
      "description":  "List of processing steps recorded for the data",
      "minItems": 1,
      "items": {
        "oneOf": [
          { "$ref": "#/definitions/ProcessingTimeStampInterpolation" },
          { "$ref": "#/definitions/ProcessingCRSTransformation" },
          { "$ref": "#/definitions/ProcessingCRS" },
          { "$ref": "#/definitions/ProcessingVerticalReduction" },
          { "$ref": "#/definitions/ProcessingGNSS" },
          { "$ref": "#/definitions/ProcessingSoundSpeedCorrection" },
          { "$ref": "#/definitions/ProcessingAlgorithm" }
        ]
      }
    },
    "ProcessingTimeStampInterpolation": {
      "type": "object",
      "required": [ "type", "timestamp", "detail" ],
      "description": "Method by which times are assigned to data being recorded.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "TimeInterpolation"
          ]
        },
        "timestamp": { "$ref": "#/definitions/RFC3339_time" },
        "detail": {
          "type": "object",
          "required": [
            "source",
            "method",
            "comment"
          ],
          "properties": {
            "source": {
              "type": "string",
              "description": "The source of the time interpolation, e.g., SystemTime | ZDA | RMC | ..."
            },
            "method": {
              "type": "string",
              "description": "The method of time interpolation, e.g., Midway | ElapsedTime | DataSource | NTP | PTP | ..."
            },
            "comment": {
              "type": "string",
              "description": "Comments regarding the source and method of time interpolation."
            }
          }
        }
      }
    },
    "ProcessingCRSTransformation": {
      "type": "object",
      "required": [ "type", "timestamp", "detail"],
      "description": "Processing that transformed the reference system of the data. Must include the original and destination coordinate reference system, and the method used to change.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "CRSTransformation"
          ]
        },
        "timestamp":  { "$ref": "#/definitions/RFC3339_time" },
        "detail": {
          "type": "object",
          "required": [
            "origin",
            "destination",
            "method"
          ],
          "properties": {
            "origin": { "$ref": "#/definitions/CRS_Name" },
            "destination": { "$ref": "#/definitions/CRS_Name" },
            "method": {
              "type": "string",
              "description": "Method used to change coordinates (e.g., GeoTrans)."
            }
          }
        }
      }
    },
    "ProcessingCRS": {
      "type": "object",
      "required": [ "type", "timestamp", "detail"],
      "description": "Processing that transformed the reference system of the data. Must include the original and destination coordinate reference system, and the method used to change.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "CRS"
          ]
        },
        "timestamp":  { "$ref": "#/definitions/RFC3339_time" },
        "detail": {
          "type": "object",
          "required": [
            "type",
            "value",
            "comment"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "EPSG"
              ]
            },
            "value": { "$ref": "#/definitions/EPSG_Number" },
            "comment": {
              "type": "string",
              "description": "Comments regarding method used to change coordinates (e.g., GeoTrans)."
            }
          }
        }
      }
    },
    "ProcessingVerticalReduction": {
      "type": "object",
      "required": [ "type", "timestamp", "detail" ],
      "description": "Steps taken to reduce raw data to a vertical reference system (Chart Datum, MSL, ellipsoid, water level, etc.). Must include the vertical reference system, and method used.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "VerticalReduction"
          ]
        },
        "timestamp":  { "$ref": "#/definitions/RFC3339_time" },
        "detail": {
          "type": "object",
          "required": [ "reference", "method", "model", "comment" ],
          "properties": {
            "reference": {
              "type": "string",
              "description": "Vertical reference system, e.g., Chart Datum, MSL, ellipsoid, water level, etc."
            },
            "method": {
              "type": "string",
              "description": "Method used to reduce raw data to vertical reference system, e.g., ObservedWL | PredictedWL | ModelledWL | EllipsoidReduction | ..."
            },
            "model": {
              "type": "string",
              "description": "Model used for reduction of raw data to vertical reference system, e.g., CANNORTH2016v1HyVSEP_NAD83v6_CD | StationReference | VDatum | VORF | ..."
            },
            "comment": {
              "type": "string",
              "description": "Comments regarding the vertical reduction."
            }
          }
        }
      }
    },
    "ProcessingGNSS": {
      "type": "object",
      "required": [ "type", "timestamp", "detail" ],
      "description": "Steps taken to post-process or improve horizontal and vertical positioning.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "GNSSProcessing"
          ]
        },
        "timestamp":  { "$ref": "#/definitions/RFC3339_time" },
        "detail": {
          "type": "object",
          "required": [
            "algorithm",
            "version",
            "comment"
          ],
          "properties": {
            "algorithm": {
              "type": "string",
              "description": "Algorithm used for GNSS post-processing, e.g., RTKLib | CSRS-PPP | ..."
            },
            "version": {
              "type": "string",
              "description": "Version of GNSS post-processing algorithm method used."
            },
            "comment": {
              "type": "string",
              "description": "Comments regarding the algorithm used for GNSS processing."
            }
          }
        }
      }
    },
    "ProcessingSoundSpeedCorrection": {
      "type": "object",
      "required": [ "type", "timestamp", "detail" ],
      "description": "Correction to soundings for sound speed in the water.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SoundSpeedCorrection"
          ]
        },
        "timestamp":  { "$ref": "#/definitions/RFC3339_time" },
        "detail": {
          "type": "object",
          "required": [ "Source", "algorithm", "version", "comment" ],
          "properties": {
            "Source": {
              "type": "string",
              "description": "Source of correction to soundings, e.g., Model | Profile | GeometricMean | Fixed | CarterTable | MatthewTable | WOA13 |..."
            },
            "algorithm": {
              "type": "string",
              "description": "Algorithm for sound speed correction, e.g., CIDCO-Ocean | Raytraced | ..."
            },
            "version": {
              "type": "string",
              "description": "Version of sound speed algorithm method used."
            },
            "comment": {
              "type": "string",
              "description": "Comments regarding the algorithm used for sound speed correction."
            }
          }
        }
      }
    },
    "ProcessingAlgorithm": {
      "type": "object",
      "required": [ "type", "timestamp", "detail" ],
      "description": "General algorithm used to triage data",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "algorithm"
          ]
        },
        "timestamp":  { "$ref": "#/definitions/RFC3339_time" },
        "detail": {
          "type": "object",
          "required": [
            "name",
            "parameters",
            "comment"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "Examples: deduplicate, uncertainty estimation, manual editing."
            },
            "parameters": {
              "type": "string",
              "description": "Parameters used in data processing."
            },
            "comment": {
              "type": "string",
              "description": "Explanatory text related to algorithm or its outputs."
            }
          }
        }
      }
    },
    "GeoJSONFeature": {
      "title": "GeoJSON Feature",
      "type": "object",
      "required": [
        "type",
        "properties",
        "geometry"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Feature"
          ]
        },
        "id": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ]
        },
        "properties": { "$ref": "#/definitions/CSBDatum" },
        "geometry": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "title": "GeoJSON Point",
              "type": "object",
              "required": [
                "type",
                "coordinates"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "Point"
                  ]
                },
                "coordinates": {
                  "type": "array",
                  "minItems": 2,
                  "items": {
                    "type": "number"
                  }
                },
                "bbox": {
                  "type": "array",
                  "minItems": 4,
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "CSBDatum": {
      "type": "object",
      "required": [
        "depth",
        "time"
      ],
      "properties": {
        "depth": {
          "type": "number",
          "description": "The distance from the vertical reference point to the seafloor. Should be collected as a positive value, in metres, with decimetre precision."
        },
        "time": {
          "description": "The date and UTC time stamp for the depth measurement as well as can be determined, ideally to millisecond precision in RFC3339 format.",
          "$ref": "#/definitions/RFC3339_time"
        }
      }
    }
  }
}
